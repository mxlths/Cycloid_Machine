CYCLOID MACHINE: DESIGN DOCUMENT v1.0
/* ========== SECTION 1: PROJECT OVERVIEW ========== /
1. PROJECT OVERVIEW
The Cycloid Machine is a 4-wheel stepper motor system designed to generate cycloidal patterns using mechanical linkages. It consists of three drive wheels (X, Y, Z) that control the machine's motion and a platen wheel (A) that holds linkages for drawing with a pen. The system is controlled through a menu interface displayed on a 16x2 LCD screen and navigated using a rotary encoder with a push button.
1.1 Key Features
Independent speed control for all four wheels (X, Y, Z, A)
Low-Frequency Oscillator (LFO) modulation of wheel speeds
Predefined ratio presets for artistic patterns
Master time control for overall speed adjustment
System pause/resume functionality
Settings reset option
/* ========== SECTION 2: HARDWARE SPECIFICATION ========== /
2. HARDWARE SPECIFICATION
2.1 Components
Microcontroller: Arduino Uno (ATmega328P) x1
Main control unit
Operating voltage: 5V
Clock speed: 16 MHz
Stepper Driver Shield: CNC Shield v3.0 x1
Interface for stepper motors
Compatible with A4988 and TMC2208 drivers
Supports 4 independent motor axes
Stepper Motor Drivers: A4988 (current) or TMC2208 (planned) x4
Individual motor controllers
Current limiting capability
Microstepping support
Stepper Motors: NEMA17, 1.8° (200 steps/rev) x4
Torque: Minimum 40 N-cm
Rated current: ~1A
4-wire bipolar configuration
Rotary Encoder: 5-pin with push button x1
Resolution: Standard 20-30 PPR
Built-in push button
5V compatible
LCD Display: 16x2 I2C LCD x1
16 characters x 2 lines
I2C interface (address 0x27 or 0x3F)
5V compatible
Power Supply: 12V, minimum 5A x1
Converted computer power supply
Sufficient current for simultaneous motor operation
Gearing: 1:3 ratio x4 sets
Wheel-to-motor gear reduction
Increases torque and precision
2.2 Pin Assignments
2.2.1 Arduino to CNC Shield (Standard Connections)
// Arduino Pin Definitions for CNC Shield
#define X_STEP_PIN 2 // X axis step signal
#define X_DIR_PIN 5 // X axis direction
#define Y_STEP_PIN 3 // Y axis step signal
#define Y_DIR_PIN 6 // Y axis direction
#define Z_STEP_PIN 4 // Z axis step signal
#define Z_DIR_PIN 7 // Z axis direction
#define A_STEP_PIN 12 // A axis step signal
#define A_DIR_PIN 13 // A axis direction
#define ENABLE_PIN 8 // Motor drivers enable (active LOW)
2.2.2 Rotary Encoder Connections
// Rotary Encoder Pin Definitions (via CNC Shield limit switch pins)
#define ENC_A_PIN 9 // CLK signal (connect to X-LIMIT on CNC Shield)
#define ENC_B_PIN 10 // DT signal (connect to Y-LIMIT on CNC Shield)
#define ENC_BTN_PIN 11 // SW push button (connect to Z-LIMIT on CNC Shield)
2.2.3 I2C LCD Connections
// I2C LCD Connection Pins (Standard Arduino I2C pins)
// SDA -> A4 on Arduino Uno
// SCL -> A5 on Arduino Uno
// VCC -> 5V
// GND -> GND
#define LCD_I2C_ADDR 0x27 // Default address, may need to change to 0x3F
2.3 Power Requirements
Arduino:
Input: 7-12V DC via barrel jack OR 5V via USB
Current: ~50mA (without peripherals)
CNC Shield and Motors:
Input: 12V DC from converted computer power supply
Current: ~1A per motor at full load (4A total for motors)
Peak current: Up to 1.5A per motor during acceleration
I2C LCD and Encoder:
Input: 5V from Arduino
Current: ~50mA combined
NOTE: Total system current requirement: ~4.1A at 12V under full load
2.4 Mechanical Specifications
Motor Step Resolution:
Basic: 1.8° (200 steps per revolution)
With microstepping: Down to 0.014° (128 microsteps, 25,600 steps per revolution)
Gear Ratio:
1:3 (motor to wheel)
Increases effective resolution by 3x
Effective Steps per Wheel Revolution:
Basic: 600 steps (200 × 3)
With 128x microstepping: 76,800 steps (600 × 128)
Maximum Speed:
~600 RPM (motor), ~200 RPM (wheel) at 12V
Limited by motor torque characteristics
/* ========== SECTION 3: SOFTWARE ARCHITECTURE ========== /
3. SOFTWARE ARCHITECTURE
3.1 Libraries Used
// Required Arduino Libraries
#include <Wire.h> // Core I2C communication, version built-in
#include <LiquidCrystal_I2C.h> // I2C LCD interface, version 1.1.2+
#include <AccelStepper.h> // Advanced stepper control, version 1.61.0+
3.2 Key Constants
// System Constants
#define MOTORS_COUNT 4
#define LCD_COLS 16
#define LCD_ROWS 2
// Motor Configuration
#define STEPS_PER_MOTOR_REV 200 // 1.8° stepper motors
#define GEAR_RATIO 3 // 1:3 gear reduction
#define STEPS_PER_WHEEL_REV (STEPS_PER_MOTOR_REV * GEAR_RATIO) // 600 steps
// Communication Settings
#define SERIAL_BAUD_RATE 9600
// Menu Navigation Constants
#define MENU_MAIN 0
#define MENU_SPEED 1
#define MENU_LFO 2
#define MENU_RATIO 3
#define MENU_MASTER 4
#define MENU_RESET 5
// Button Timing Constants
#define DEBOUNCE_TIME 50 // ms
#define LONG_PRESS_TIME 1000 // ms
// Motor Control Constants
#define MOTOR_UPDATE_INTERVAL 5 // ms
// LFO Control Constants
#define LFO_RESOLUTION 1000 // Phase resolution for smoother LFO
3.3 Data Structures
3.3.1 Menu System Variables
// Menu State Variables
byte currentMenu = MENU_MAIN; // Current active menu
byte selectedOption = 0; // Selected option in current menu
bool systemPaused = false; // System pause state
3.3.2 Wheel Speed Parameters
// Speed Control Variables
float wheelSpeeds[MOTORS_COUNT] = {10.0, 10.0, 10.0, 10.0}; // Default 10.0
byte selectedSpeedWheel = 0; // Currently selected wheel
bool editingSpeed = false; // Flag for editing mode
3.3.3 LFO Parameters
// LFO Control Variables
float lfoDepths[MOTORS_COUNT] = {0.0, 0.0, 0.0, 0.0}; // Default 0.0%
float lfoRates[MOTORS_COUNT] = {0.0, 0.0, 0.0, 0.0}; // Default 0.0
bool lfoPolarities[MOTORS_COUNT] = {false, false, false, false}; // false=UNI, true=BI
byte selectedLfoParam = 0; // 0-11: 4 wheels × 3 params
bool editingLfo = false; // Flag for editing mode
// LFO State Variables
unsigned long lfoPhases[MOTORS_COUNT] = {0, 0, 0, 0}; // Current phase of each LFO
3.3.4 Ratio Presets
// Ratio Preset Values
const float ratioPresets[4][MOTORS_COUNT] = {
{100.0, 100.0, 100.0, 100.0}, // Equal (Preset 1)
{50.0, 100.0, 150.0, 200.0}, // Increasing (Preset 2)
{200.0, 150.0, 100.0, 50.0}, // Decreasing (Preset 3)
{75.0, 125.0, 175.0, 225.0} // Custom (Preset 4)
};
// Ratio Control Variables
byte selectedRatioPreset = 0; // Currently selected preset (0-3)
bool confirmingRatio = false; // Flag for confirmation dialog
bool ratioChoice = false; // false=NO, true=YES
3.3.5 Master Time Control
// Master Time Variables
float masterTime = 1.00; // Default 1.00 second
bool editingMaster = false; // Flag for edit mode
3.3.6 Reset Functionality
// Reset Control Variables
bool confirmingReset = false; // Flag for confirmation dialog
bool resetChoice = false; // false=NO, true=YES
3.4 Function Categories
3.4.1 Setup and Initialization
// CODE: setup() function responsibilities
void setup() {
// 1. Initialize serial communication
// 2. Initialize I2C LCD
// 3. Configure encoder pins with pull-up resistors
// 4. Attach encoder interrupts
// 5. Initialize stepper motors and set parameters
// 6. Enable motor drivers
// 7. Display initial menu
}
3.4.2 Input Handling
// CODE: Key input handling functions
void updateEncoderPosition(); // Process encoder rotation (interrupt-driven)
void handleEncoderChange(int change); // Respond to encoder movement based on current menu
void checkButtonPress(); // Detect button presses with debounce
void handleShortPress(); // Process short button press actions
void handleLongPress(); // Process long button press actions
3.4.3 Display Management
// CODE: Display function
void updateDisplay(); // Format and update LCD based on current menu/state
3.4.4 Motor Control
// CODE: Motor control functions
void updateMotorSpeeds(); // Calculate speeds and update stepper motors
float calculateLfoModulation(byte motorIndex); // Calculate LFO effect for a motor
void applyRatioPreset(byte presetIndex); // Apply selected ratio to wheel speeds
void resetToDefaults(); // Reset all parameters to default values
3.4.5 Serial Communication
// CODE: Serial interface function
void processSerialCommands(); // Parse and execute commands from serial input
/* ========== SECTION 4: MENU SYSTEM SPECIFICATION ========== /
4. MENU SYSTEM SPECIFICATION
4.1 Navigation Principles
Rotary Encoder
Turn clockwise: Increment values, move to next option
Turn counter-clockwise: Decrement values, move to previous option
Short press: Select option or toggle edit mode
Long press: Return to main menu or toggle system pause
Display Indicators
">" symbol: Indicates current selection
"#" symbol: Indicates edit mode is active
4.2 Menu Structure
4.2.1 MAIN Menu
Purpose: Central navigation hub to access all submenus
Options: SPEED, LFO, RATIO, MASTER, RESET
Display Format:
>SPEED
LFO RATIO MSTR
Navigation:
Turn encoder: Cycle through options
Short press: Enter selected submenu
Long press: Toggle system pause state
4.2.2 SPEED Menu
Purpose: Adjust individual wheel speeds
Parameters: X, Y, Z, A wheel speeds
Display Format:
SPEED: X
Value: 010.0
(When editing):
SPEED: X#
Value: 010.1
Value Range: 0.1 to 256.0
Default Value: 10.0
Navigation:
Turn encoder (not editing): Select wheel (X, Y, Z, A)
Turn encoder (editing): Adjust speed value (±0.1 per step)
Short press: Toggle between wheel selection and speed editing
Long press: Return to main menu
4.2.3 LFO Menu
Purpose: Configure Low-Frequency Oscillator parameters
Parameters per wheel: Depth, Rate, Polarity (12 parameters total)
Display Format (example for X Depth):
LFO: X DPT
Value: 030.0%
(When editing):
LFO: X DPT#
Value: 030.0%
Value Ranges:
Depth: 0.0% to 100.0%
Rate: 0.0 to 256.0
Polarity: UNI or BI
Default Values:
Depth: 0.0%
Rate: 0.0
Polarity: UNI
Navigation:
Turn encoder (not editing): Cycle through 12 parameters
Turn encoder (editing): Adjust selected parameter value
Short press: Toggle between parameter selection and value editing
Long press: Return to main menu
4.2.4 RATIO Menu
Purpose: Apply predefined speed ratios to wheels
Presets: 4 ratio configurations
Display Format:
RATIO PRESET: 1
100:100:100:100
(Confirmation screen):
APPLY RATIO?
>NO YES
Preset Values:
Equal ratios: 100:100:100:100
Increasing: 50:100:150:200
Decreasing: 200:150:100:50
Custom: 75:125:175:225
Navigation:
Turn encoder (preset selection): Cycle through 4 presets
Turn encoder (confirmation): Toggle between NO and YES
Short press: Enter confirmation screen or confirm selection
Long press: Return to main menu without applying
4.2.5 MASTER Menu
Purpose: Adjust master time multiplier
Display Format:
MASTER TIME:
Value: 001.00 S
(When editing):
MASTER TIME:#
Value: 001.01 S
Value Range: 0.01 to 999.99 seconds
Default Value: 1.00 second
Navigation:
Turn encoder (editing): Adjust value (±0.01 per step)
Short press: Toggle editing mode
Long press: Return to main menu
4.2.6 RESET Menu
Purpose: Reset all settings to defaults
Display Format:
RESET TO DEFLT?
>NO YES
Navigation:
Turn encoder: Toggle between NO and YES
Short press: Confirm selection
Long press: Return to main menu without resetting
4.2.7 System Pause Display
Purpose: Indicate system is paused and halt motor movement
Activation: Long press in main menu
Display Format:
SYSTEM
* PAUSED *
Behavior: All motors stop when paused
Navigation: Long press again to resume operation
/* ========== SECTION 5: SPEED CALCULATION AND MODULATION ========== /
5. SPEED CALCULATION AND MODULATION
5.1 Base Speed Calculation
The system uses an inverse relationship for speed values:
Higher speed value = slower wheel rotation
Lower speed value = faster wheel rotation
Formula:
Steps per second = (Steps per wheel revolution) / (masterTime * wheelSpeed)
Where:
Steps per wheel revolution = 600 (200 steps/rev * 3 gear ratio)
masterTime = time in seconds for one full rotation at speed 1.0
wheelSpeed = user-set parameter (range 0.1-256.0)
Examples:
wheelSpeed = 1.0, masterTime = 1.0:
600 / (1.0 * 1.0) = 600 steps/sec = 1 rotation per second
wheelSpeed = 10.0, masterTime = 1.0:
600 / (1.0 * 10.0) = 60 steps/sec = 0.1 rotations per second
wheelSpeed = 10.0, masterTime = 2.0:
600 / (2.0 * 10.0) = 30 steps/sec = 0.05 rotations per second
5.2 LFO Modulation
LFO modulates the wheel speed using sine wave oscillation.
Calculation Steps:
Determine current LFO phase (0-999, mapped to 0-2π)
Calculate sine value (-1.0 to 1.0)
Apply depth and polarity adjustments
Unipolar Modulation (UNI):
Modulation = baseSpeed * (depth/100) * (sin(phase) + 1) / 2
finalSpeed = baseSpeed - modulation (never goes negative/reverses)
Bipolar Modulation (BI):
Modulation = baseSpeed * (depth/100) * sin(phase)
finalSpeed = baseSpeed + modulation
5.3 LFO Rate Calculation
Rate value determines the frequency of oscillation
Rate 1.0 = 1 complete cycle in masterTime seconds
Rate 10.0 = 1/10 cycle in masterTime seconds (slower)
Phase Update Formula:
phaseIncrement = (updateInterval/1000) * (1/(masterTimelfoRate)) phaseResolution
/* ========== SECTION 6: SERIAL COMMAND INTERFACE ========== /
6. SERIAL COMMAND INTERFACE
6.1 Command Syntax
The system accepts serial commands at 9600 baud with the following format:
COMMAND [PARAMETER1] [PARAMETER2] [VALUE]
6.2 Available Commands
HELP
Parameters: none
Example: HELP
Description: Display available commands
STATUS
Parameters: none
Example: STATUS
Description: Show current system status
PAUSE
Parameters: none
Example: PAUSE
Description: Pause the system
RESUME
Parameters: none
Example: RESUME
Description: Resume the system
RESET
Parameters: none
Example: RESET
Description: Reset to default values
SPEED
Parameters: X/Y/Z/A, value
Example: SPEED X 15.2
Description: Set wheel speed
LFO
Parameters: X/Y/Z/A, DEPTH/RATE/POL, value
Example: LFO X DEPTH 50.0
Description: Set LFO parameter
MASTER
Parameters: value
Example: MASTER 2.5
Description: Set master time
RATIO
Parameters: preset number (1-4)
Example: RATIO 2
Description: Apply ratio preset
/* ========== SECTION 7: FUTURE IMPROVEMENTS ========== /
7. FUTURE IMPROVEMENTS
7.1 Hardware Extensions
Implementation of 128 microstepping for finer motor control
Addition of emergency stop button
EEPROM storage for saving user presets
External SD card for pattern storage
End stops or limit switches for homing and safety
7.2 Software Enhancements
User-definable ratio presets
Pattern recording and playback
Advanced modulation patterns beyond sine wave
Motor acceleration control for smoother operation
WiFi/Bluetooth connectivity for remote control
Computer interface for pattern design
/* ========== SECTION 8: SAFETY CONSIDERATIONS ========== /
8. SAFETY CONSIDERATIONS
Motor current limiting to prevent overheating
Thermal protection via driver settings
Software limits on speed changes to prevent mechanical shock
Monitoring of power supply voltage
Safe shutdown procedure in case of power loss
/* ========== SECTION 9: MAINTENANCE AND CALIBRATION ========== /
9. MAINTENANCE AND CALIBRATION
9.1 Regular Maintenance
Check motor temperature during extended operation
Inspect mechanical connections and gear mesh
Verify encoder functionality and clean if necessary
Check power supply output voltage
9.2 Calibration Procedure
Verify expected steps per revolution
Check gearing ratio accuracy
Calibrate LFO timing against external reference
Validate actual wheel speeds against settings
/* ========== END OF DOCUMENT ========== /